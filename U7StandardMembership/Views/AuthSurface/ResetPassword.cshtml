@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Umbraco.Web
@using U7StandardMembership.Models
@using U7StandardMembership.Controllers.SurfaceControllers
@model ResetPasswordViewModel

@{
    Html.EnableClientValidation(true);
    Html.EnableUnobtrusiveJavaScript(true);
}

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <h4>Errors</h4>
        @foreach (ModelState modelState in ViewData.ModelState.Values)
        {
            var errors = modelState.Errors;

            if (errors.Any())
            {
                <ul>
                    @foreach (ModelError error in errors)
                    {
                        <li><em>@error.ErrorMessage</em></li>
                    }
                </ul>
            }
        }
    </div>
}

@if (Convert.ToBoolean(TempData["IsSuccessful"]))
{
    <div class="alert alert-success">
        <h4>Yay!</h4>
        <p>We have successfully reset your password</p>
    </div>
}
else
{
    using (Html.BeginUmbracoForm<AuthSurfaceController>("HandleResetPassword"))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        <fieldset>

            <div class="form-group">
                @Html.LabelFor(model => model.EmailAddress, "Email address", new { @class = "control-label" })
                @Html.TextBoxFor(model => model.EmailAddress, new { @class = "form-control", placeholder = "Email Address" })
                @Html.ValidationMessageFor(model => model.EmailAddress, string.Empty, new { @class = "help-block" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Password, "Password", new { @class = "control-label" })
                @Html.PasswordFor(model => model.Password, new { @class = "form-control", placeholder = "Password" })
                @Html.ValidationMessageFor(model => model.Password, string.Empty, new { @class = "help-block" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmPassword, "Confirm password", new { @class = "control-label" })
                @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", placeholder = "Confirm Password" })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, string.Empty, new { @class = "help-block" })
            </div>

            <button type="submit" class="btn btn-default">Reset Password</button>
        </fieldset>
    }
}